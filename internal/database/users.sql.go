// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, email, password)
VALUES (
	gen_random_uuid (),
	NOW(),
	NOW(),
	$1,
	$2
)
RETURNING id, created_at, updated_at, email, password, is_chirpy_red
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec

DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const getUserByEmail = `-- name: GetUserByEmail :one

SELECT id, created_at, updated_at, email, password, is_chirpy_red FROM users
WHERE $1 = email
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}

const makePremium = `-- name: MakePremium :exec

UPDATE users
SET is_chirpy_red = true
WHERE id = $1
`

func (q *Queries) MakePremium(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, makePremium, id)
	return err
}

const updateCredentials = `-- name: UpdateCredentials :one
UPDATE users
SET email = $1, password = $2, updated_at = $3
WHERE id = $4
RETURNING id, created_at, updated_at, email, password, is_chirpy_red
`

type UpdateCredentialsParams struct {
	Email     string
	Password  string
	UpdatedAt time.Time
	ID        uuid.UUID
}

func (q *Queries) UpdateCredentials(ctx context.Context, arg UpdateCredentialsParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateCredentials,
		arg.Email,
		arg.Password,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Email,
		&i.Password,
		&i.IsChirpyRed,
	)
	return i, err
}
